/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QueryUtilsInterface extends ethers.utils.Interface {
  functions: {
    "AmlBetweenExclusive(bytes32,uint256,uint256)": FunctionFragment;
    "AmlBetweenInclusive(bytes32,uint256,uint256)": FunctionFragment;
    "AmlGreaterThan(bytes32,uint256)": FunctionFragment;
    "AmlGreaterThanEqual(bytes32,uint256)": FunctionFragment;
    "AmlIsEqual(bytes32,uint256)": FunctionFragment;
    "AmlLessThan(bytes32,uint256)": FunctionFragment;
    "AmlLessThanEqual(bytes32,uint256)": FunctionFragment;
    "CountryIsEqual(bytes32,string)": FunctionFragment;
    "CredProtocolScoreIteratorLessThan(bytes32,bytes32,uint256)": FunctionFragment;
    "IsBusinessFalse(bytes32)": FunctionFragment;
    "IsBusinessTrue(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AmlBetweenExclusive",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlBetweenInclusive",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlGreaterThan",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlGreaterThanEqual",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlIsEqual",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlLessThan",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AmlLessThanEqual",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CountryIsEqual",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "CredProtocolScoreIteratorLessThan",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "IsBusinessFalse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "IsBusinessTrue",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AmlBetweenExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AmlBetweenInclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AmlGreaterThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AmlGreaterThanEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "AmlIsEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AmlLessThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AmlLessThanEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CountryIsEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CredProtocolScoreIteratorLessThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsBusinessFalse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsBusinessTrue",
    data: BytesLike
  ): Result;

  events: {};
}

export class QueryUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QueryUtilsInterface;

  functions: {
    AmlBetweenExclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlBetweenInclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlGreaterThan(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlGreaterThanEqual(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlIsEqual(
      _attrValue: BytesLike,
      _expectedInt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlLessThan(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    AmlLessThanEqual(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CountryIsEqual(
      _attrValue: BytesLike,
      _expectedString: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CredProtocolScoreIteratorLessThan(
      _attrValue: BytesLike,
      _startingHash: BytesLike,
      _iteratorThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    IsBusinessFalse(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    IsBusinessTrue(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AmlBetweenExclusive(
    _attrValue: BytesLike,
    _lowerBound: BigNumberish,
    _upperBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlBetweenInclusive(
    _attrValue: BytesLike,
    _lowerBound: BigNumberish,
    _upperBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlGreaterThan(
    _attrValue: BytesLike,
    _lowerBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlGreaterThanEqual(
    _attrValue: BytesLike,
    _lowerBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlIsEqual(
    _attrValue: BytesLike,
    _expectedInt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlLessThan(
    _attrValue: BytesLike,
    _upperBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  AmlLessThanEqual(
    _attrValue: BytesLike,
    _upperBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  CountryIsEqual(
    _attrValue: BytesLike,
    _expectedString: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  CredProtocolScoreIteratorLessThan(
    _attrValue: BytesLike,
    _startingHash: BytesLike,
    _iteratorThreshold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  IsBusinessFalse(
    _attrValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  IsBusinessTrue(
    _attrValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AmlBetweenExclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlBetweenInclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlGreaterThan(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlGreaterThanEqual(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlIsEqual(
      _attrValue: BytesLike,
      _expectedInt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlLessThan(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AmlLessThanEqual(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    CountryIsEqual(
      _attrValue: BytesLike,
      _expectedString: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    CredProtocolScoreIteratorLessThan(
      _attrValue: BytesLike,
      _startingHash: BytesLike,
      _iteratorThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    IsBusinessFalse(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    IsBusinessTrue(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    AmlBetweenExclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlBetweenInclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlGreaterThan(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlGreaterThanEqual(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlIsEqual(
      _attrValue: BytesLike,
      _expectedInt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlLessThan(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AmlLessThanEqual(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CountryIsEqual(
      _attrValue: BytesLike,
      _expectedString: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CredProtocolScoreIteratorLessThan(
      _attrValue: BytesLike,
      _startingHash: BytesLike,
      _iteratorThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsBusinessFalse(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsBusinessTrue(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AmlBetweenExclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlBetweenInclusive(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlGreaterThan(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlGreaterThanEqual(
      _attrValue: BytesLike,
      _lowerBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlIsEqual(
      _attrValue: BytesLike,
      _expectedInt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlLessThan(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AmlLessThanEqual(
      _attrValue: BytesLike,
      _upperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CountryIsEqual(
      _attrValue: BytesLike,
      _expectedString: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CredProtocolScoreIteratorLessThan(
      _attrValue: BytesLike,
      _startingHash: BytesLike,
      _iteratorThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsBusinessFalse(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsBusinessTrue(
      _attrValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
