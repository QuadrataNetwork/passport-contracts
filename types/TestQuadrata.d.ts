/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestQuadrataInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "checkBeforeEpoch(address,bytes32,uint256,uint256)": FunctionFragment;
    "checkIssuer(address,bytes32,address,uint256)": FunctionFragment;
    "checkNumberAttributes(address,bytes32,uint256)": FunctionFragment;
    "checkValues(address,bytes32,bytes32,uint256)": FunctionFragment;
    "checkValuesInt(address,bytes32,uint256,uint256)": FunctionFragment;
    "reader()": FunctionFragment;
    "setReader(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkBeforeEpoch",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIssuer",
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNumberAttributes",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkValues",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkValuesInt",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reader", values?: undefined): string;
  encodeFunctionData(functionFragment: "setReader", values: [string]): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBeforeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNumberAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValuesInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReader", data: BytesLike): Result;

  events: {};
}

export class TestQuadrata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestQuadrataInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    checkBeforeEpoch(
      _account: string,
      _attribute: BytesLike,
      _epoch: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkIssuer(
      _account: string,
      _attribute: BytesLike,
      _issuer: string,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkNumberAttributes(
      _account: string,
      _attribute: BytesLike,
      _number: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkValues(
      _account: string,
      _attribute: BytesLike,
      _value: BytesLike,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkValuesInt(
      _account: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reader(overrides?: CallOverrides): Promise<[string]>;

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  checkBeforeEpoch(
    _account: string,
    _attribute: BytesLike,
    _epoch: BigNumberish,
    i: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkIssuer(
    _account: string,
    _attribute: BytesLike,
    _issuer: string,
    i: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkNumberAttributes(
    _account: string,
    _attribute: BytesLike,
    _number: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkValues(
    _account: string,
    _attribute: BytesLike,
    _value: BytesLike,
    i: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkValuesInt(
    _account: string,
    _attribute: BytesLike,
    _value: BigNumberish,
    i: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reader(overrides?: CallOverrides): Promise<string>;

  setReader(
    _reader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    checkBeforeEpoch(
      _account: string,
      _attribute: BytesLike,
      _epoch: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIssuer(
      _account: string,
      _attribute: BytesLike,
      _issuer: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkNumberAttributes(
      _account: string,
      _attribute: BytesLike,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkValues(
      _account: string,
      _attribute: BytesLike,
      _value: BytesLike,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkValuesInt(
      _account: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reader(overrides?: CallOverrides): Promise<string>;

    setReader(_reader: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    checkBeforeEpoch(
      _account: string,
      _attribute: BytesLike,
      _epoch: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkIssuer(
      _account: string,
      _attribute: BytesLike,
      _issuer: string,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkNumberAttributes(
      _account: string,
      _attribute: BytesLike,
      _number: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkValues(
      _account: string,
      _attribute: BytesLike,
      _value: BytesLike,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkValuesInt(
      _account: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reader(overrides?: CallOverrides): Promise<BigNumber>;

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkBeforeEpoch(
      _account: string,
      _attribute: BytesLike,
      _epoch: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkIssuer(
      _account: string,
      _attribute: BytesLike,
      _issuer: string,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkNumberAttributes(
      _account: string,
      _attribute: BytesLike,
      _number: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkValues(
      _account: string,
      _attribute: BytesLike,
      _value: BytesLike,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkValuesInt(
      _account: string,
      _attribute: BytesLike,
      _value: BigNumberish,
      i: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
