/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuadGovernanceOldInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNANCE_ROLE()": FunctionFragment;
    "ISSUER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "READER_ROLE()": FunctionFragment;
    "acceptGovernanceInPassport()": FunctionFragment;
    "allowTokenPayment(address,bool)": FunctionFragment;
    "config()": FunctionFragment;
    "deleteIssuer(address)": FunctionFragment;
    "eligibleAttributes(bytes32)": FunctionFragment;
    "eligibleAttributesArray(uint256)": FunctionFragment;
    "eligibleAttributesByDID(bytes32)": FunctionFragment;
    "eligibleTokenId(uint256)": FunctionFragment;
    "eligibleTokenPayments(address)": FunctionFragment;
    "getEligibleAttributesLength()": FunctionFragment;
    "getIssuerStatus(address)": FunctionFragment;
    "getIssuers()": FunctionFragment;
    "getIssuersLength()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getPriceETH()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "issuers(uint256)": FunctionFragment;
    "issuersTreasury(address)": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "mintPricePerAttribute(bytes32)": FunctionFragment;
    "oracle()": FunctionFragment;
    "passport()": FunctionFragment;
    "pricePerAttribute(bytes32)": FunctionFragment;
    "pricePerBusinessAttribute(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revSplitIssuer()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAttributeMintPrice(bytes32,uint256)": FunctionFragment;
    "setAttributePrice(bytes32,uint256)": FunctionFragment;
    "setBusinessAttributePrice(bytes32,uint256)": FunctionFragment;
    "setEligibleAttribute(bytes32,bool)": FunctionFragment;
    "setEligibleAttributeByDID(bytes32,bool)": FunctionFragment;
    "setEligibleTokenId(uint256,bool)": FunctionFragment;
    "setIssuer(address,address)": FunctionFragment;
    "setIssuerStatus(address,uint8)": FunctionFragment;
    "setMintPrice(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPassportContractAddress(address)": FunctionFragment;
    "setRevSplitIssuer(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateGovernanceInPassport(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "READER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernanceInPassport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowTokenPayment",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesByDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleTokenPayments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleAttributesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuersLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriceETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuersTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPricePerAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "passport", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerBusinessAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revSplitIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeMintPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributePrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBusinessAttributePrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttribute",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttributeByDID",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleTokenId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuerStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPassportContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevSplitIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceInPassport",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "READER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernanceInPassport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleTokenPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleAttributesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuersTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPricePerAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "passport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerBusinessAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBusinessAttributePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttributeByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPassportContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceInPassport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AllowTokenPayment(address,bool)": EventFragment;
    "AttributeMintPriceUpdated(bytes32,uint256,uint256)": EventFragment;
    "AttributePriceUpdated(bytes32,uint256,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BusinessAttributePriceUpdated(bytes32,uint256,uint256)": EventFragment;
    "EligibleAttributeByDIDUpdated(bytes32,bool)": EventFragment;
    "EligibleAttributeUpdated(bytes32,bool)": EventFragment;
    "EligibleTokenUpdated(uint256,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IssuerAdded(address,address)": EventFragment;
    "IssuerDeleted(address)": EventFragment;
    "IssuerStatusChanged(address,uint8,uint8)": EventFragment;
    "OracleUpdated(address,address)": EventFragment;
    "PassportAddressUpdated(address,address)": EventFragment;
    "PassportMintPriceUpdated(uint256,uint256)": EventFragment;
    "PassportVersionUpdated(uint256,uint256)": EventFragment;
    "RevenueSplitIssuerUpdated(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TreasuryUpdated(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowTokenPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttributeMintPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttributePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BusinessAttributePriceUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EligibleAttributeByDIDUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibleAttributeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibleTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PassportAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PassportMintPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PassportVersionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueSplitIssuerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type AllowTokenPaymentEvent = TypedEvent<
  [string, boolean] & { _tokenAddr: string; _isAllowed: boolean }
>;

export type AttributeMintPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _attribute: string;
    _oldPrice: BigNumber;
    _price: BigNumber;
  }
>;

export type AttributePriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _attribute: string;
    _oldPrice: BigNumber;
    _price: BigNumber;
  }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type BusinessAttributePriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _attribute: string;
    _oldPrice: BigNumber;
    _price: BigNumber;
  }
>;

export type EligibleAttributeByDIDUpdatedEvent = TypedEvent<
  [string, boolean] & { _attribute: string; _eligibleStatus: boolean }
>;

export type EligibleAttributeUpdatedEvent = TypedEvent<
  [string, boolean] & { _attribute: string; _eligibleStatus: boolean }
>;

export type EligibleTokenUpdatedEvent = TypedEvent<
  [BigNumber, boolean] & { _tokenId: BigNumber; _eligibleStatus: boolean }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type IssuerAddedEvent = TypedEvent<
  [string, string] & { _issuer: string; _newTreasury: string }
>;

export type IssuerDeletedEvent = TypedEvent<[string] & { _issuer: string }>;

export type IssuerStatusChangedEvent = TypedEvent<
  [string, number, number] & {
    issuer: string;
    oldStatus: number;
    newStatus: number;
  }
>;

export type OracleUpdatedEvent = TypedEvent<
  [string, string] & { _oldAddress: string; _address: string }
>;

export type PassportAddressUpdatedEvent = TypedEvent<
  [string, string] & { _oldAddress: string; _address: string }
>;

export type PassportMintPriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _oldMintPrice: BigNumber; _mintPrice: BigNumber }
>;

export type PassportVersionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _oldVersion: BigNumber; _version: BigNumber }
>;

export type RevenueSplitIssuerUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _oldSplit: BigNumber; _split: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TreasuryUpdatedEvent = TypedEvent<
  [string, string] & { _oldAddress: string; _address: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class QuadGovernanceOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuadGovernanceOldInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    READER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        revSplitIssuer: BigNumber;
        mintPrice: BigNumber;
        passport: string;
        oracle: string;
        treasury: string;
      }
    >;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eligibleAttributes(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleAttributesArray(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eligibleAttributesByDID(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleTokenId(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleTokenPayments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getIssuers(
      overrides?: CallOverrides
    ): Promise<[([string, number] & { issuer: string; status: number })[]]>;

    getIssuersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuers(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { issuer: string; status: number }]>;

    issuersTreasury(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintPricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    passport(overrides?: CallOverrides): Promise<[string]>;

    pricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricePerBusinessAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revSplitIssuer(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuerStatus(
      _issuer: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  READER_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptGovernanceInPassport(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowTokenPayment(
    _tokenAddr: string,
    _isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      revSplitIssuer: BigNumber;
      mintPrice: BigNumber;
      passport: string;
      oracle: string;
      treasury: string;
    }
  >;

  deleteIssuer(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eligibleAttributes(
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleAttributesArray(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  eligibleAttributesByDID(
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleTokenId(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleTokenPayments(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getIssuerStatus(_issuer: string, overrides?: CallOverrides): Promise<number>;

  getIssuers(
    overrides?: CallOverrides
  ): Promise<([string, number] & { issuer: string; status: number })[]>;

  getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuers(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { issuer: string; status: number }>;

  issuersTreasury(_value: string, overrides?: CallOverrides): Promise<string>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mintPricePerAttribute(
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  passport(overrides?: CallOverrides): Promise<string>;

  pricePerAttribute(
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricePerBusinessAttribute(
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttributeMintPrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttributePrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBusinessAttributePrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttribute(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttributeByDID(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleTokenId(
    _tokenId: BigNumberish,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuer(
    _issuer: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuerStatus(
    _issuer: string,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintPrice(
    _mintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracleAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPassportContractAddress(
    _passportAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevSplitIssuer(
    _split: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateGovernanceInPassport(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    READER_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptGovernanceInPassport(overrides?: CallOverrides): Promise<void>;

    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        revSplitIssuer: BigNumber;
        mintPrice: BigNumber;
        passport: string;
        oracle: string;
        treasury: string;
      }
    >;

    deleteIssuer(_issuer: string, overrides?: CallOverrides): Promise<void>;

    eligibleAttributes(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleAttributesArray(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    eligibleAttributesByDID(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleTokenId(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleTokenPayments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getIssuers(
      overrides?: CallOverrides
    ): Promise<([string, number] & { issuer: string; status: number })[]>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    issuers(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { issuer: string; status: number }>;

    issuersTreasury(_value: string, overrides?: CallOverrides): Promise<string>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintPricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    passport(overrides?: CallOverrides): Promise<string>;

    pricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuerStatus(
      _issuer: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracleAddr: string, overrides?: CallOverrides): Promise<void>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "AllowTokenPayment(address,bool)"(
      _tokenAddr?: string | null,
      _isAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _tokenAddr: string; _isAllowed: boolean }
    >;

    AllowTokenPayment(
      _tokenAddr?: string | null,
      _isAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _tokenAddr: string; _isAllowed: boolean }
    >;

    "AttributeMintPriceUpdated(bytes32,uint256,uint256)"(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    AttributeMintPriceUpdated(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    "AttributePriceUpdated(bytes32,uint256,uint256)"(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    AttributePriceUpdated(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "BusinessAttributePriceUpdated(bytes32,uint256,uint256)"(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    BusinessAttributePriceUpdated(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    "EligibleAttributeByDIDUpdated(bytes32,bool)"(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    EligibleAttributeByDIDUpdated(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    "EligibleAttributeUpdated(bytes32,bool)"(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    EligibleAttributeUpdated(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    "EligibleTokenUpdated(uint256,bool)"(
      _tokenId?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _tokenId: BigNumber; _eligibleStatus: boolean }
    >;

    EligibleTokenUpdated(
      _tokenId?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _tokenId: BigNumber; _eligibleStatus: boolean }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "IssuerAdded(address,address)"(
      _issuer?: string | null,
      _newTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { _issuer: string; _newTreasury: string }
    >;

    IssuerAdded(
      _issuer?: string | null,
      _newTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { _issuer: string; _newTreasury: string }
    >;

    "IssuerDeleted(address)"(
      _issuer?: string | null
    ): TypedEventFilter<[string], { _issuer: string }>;

    IssuerDeleted(
      _issuer?: string | null
    ): TypedEventFilter<[string], { _issuer: string }>;

    "IssuerStatusChanged(address,uint8,uint8)"(
      issuer?: string | null,
      oldStatus?: null,
      newStatus?: null
    ): TypedEventFilter<
      [string, number, number],
      { issuer: string; oldStatus: number; newStatus: number }
    >;

    IssuerStatusChanged(
      issuer?: string | null,
      oldStatus?: null,
      newStatus?: null
    ): TypedEventFilter<
      [string, number, number],
      { issuer: string; oldStatus: number; newStatus: number }
    >;

    "OracleUpdated(address,address)"(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    OracleUpdated(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    "PassportAddressUpdated(address,address)"(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    PassportAddressUpdated(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    "PassportMintPriceUpdated(uint256,uint256)"(
      _oldMintPrice?: null,
      _mintPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldMintPrice: BigNumber; _mintPrice: BigNumber }
    >;

    PassportMintPriceUpdated(
      _oldMintPrice?: null,
      _mintPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldMintPrice: BigNumber; _mintPrice: BigNumber }
    >;

    "PassportVersionUpdated(uint256,uint256)"(
      _oldVersion?: null,
      _version?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldVersion: BigNumber; _version: BigNumber }
    >;

    PassportVersionUpdated(
      _oldVersion?: null,
      _version?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldVersion: BigNumber; _version: BigNumber }
    >;

    "RevenueSplitIssuerUpdated(uint256,uint256)"(
      _oldSplit?: null,
      _split?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldSplit: BigNumber; _split: BigNumber }
    >;

    RevenueSplitIssuerUpdated(
      _oldSplit?: null,
      _split?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldSplit: BigNumber; _split: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TreasuryUpdated(address,address)"(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    TreasuryUpdated(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    READER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eligibleAttributes(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesArray(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesByDID(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleTokenId(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleTokenPayments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuers(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuers(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuersTreasury(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintPricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    passport(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuerStatus(
      _issuer: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    READER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eligibleAttributes(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesArray(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesByDID(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleTokenId(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleTokenPayments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIssuersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuers(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuersTreasury(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    passport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerBusinessAttribute(
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revSplitIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuerStatus(
      _issuer: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
