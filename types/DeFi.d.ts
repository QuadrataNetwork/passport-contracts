/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DeFiInterface extends ethers.utils.Interface {
  functions: {
    "deposit(address,bytes32)": FunctionFragment;
    "depositBulk(address,bytes32[])": FunctionFragment;
    "depositBulkLegacy(address,bytes32[])": FunctionFragment;
    "depositLegacy(address,bytes32)": FunctionFragment;
    "passport()": FunctionFragment;
    "reader()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBulk",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBulkLegacy",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLegacy",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "passport", values?: undefined): string;
  encodeFunctionData(functionFragment: "reader", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBulkLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passport", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reader", data: BytesLike): Result;

  events: {
    "GetAttributesBulkEvent(bytes32[],uint256[],address[])": EventFragment;
    "GetAttributesEvent(bytes32[],uint256[],address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GetAttributesBulkEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetAttributesEvent"): EventFragment;
}

export type GetAttributesBulkEventEvent = TypedEvent<
  [string[], BigNumber[], string[]] & {
    attrValues: string[];
    epochs: BigNumber[];
    issuers: string[];
  }
>;

export type GetAttributesEventEvent = TypedEvent<
  [string[], BigNumber[], string[]] & {
    attrValues: string[];
    epochs: BigNumber[];
    issuers: string[];
  }
>;

export class DeFi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DeFiInterface;

  functions: {
    deposit(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBulk(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBulkLegacy(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLegacy(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    passport(overrides?: CallOverrides): Promise<[string]>;

    reader(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    _account: string,
    _attribute: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBulk(
    _account: string,
    _attributes: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBulkLegacy(
    _account: string,
    _attributes: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLegacy(
    _account: string,
    _attribute: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  passport(overrides?: CallOverrides): Promise<string>;

  reader(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(
      _account: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        value: string;
        epoch: BigNumber;
        issuer: string;
      })[]
    >;

    depositBulk(
      _account: string,
      _attributes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        value: string;
        epoch: BigNumber;
        issuer: string;
      })[]
    >;

    depositBulkLegacy(
      _account: string,
      _attributes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], string[]]>;

    depositLegacy(
      _account: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], string[]]>;

    passport(overrides?: CallOverrides): Promise<string>;

    reader(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GetAttributesBulkEvent(bytes32[],uint256[],address[])"(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    GetAttributesBulkEvent(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    "GetAttributesEvent(bytes32[],uint256[],address[])"(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    GetAttributesEvent(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;
  };

  estimateGas: {
    deposit(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBulk(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBulkLegacy(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLegacy(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    passport(overrides?: CallOverrides): Promise<BigNumber>;

    reader(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBulk(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBulkLegacy(
      _account: string,
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLegacy(
      _account: string,
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    passport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reader(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
