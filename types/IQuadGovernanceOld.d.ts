/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IQuadGovernanceOldInterface extends ethers.utils.Interface {
  functions: {
    "allowTokenPayment(address,bool)": FunctionFragment;
    "deleteIssuer(address)": FunctionFragment;
    "eligibleAttributes(bytes32)": FunctionFragment;
    "eligibleAttributesArray(uint256)": FunctionFragment;
    "eligibleAttributesByDID(bytes32)": FunctionFragment;
    "eligibleTokenId(uint256)": FunctionFragment;
    "getEligibleAttributesLength()": FunctionFragment;
    "getIssuerStatus(address)": FunctionFragment;
    "getIssuers()": FunctionFragment;
    "getIssuersLength()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getPriceETH()": FunctionFragment;
    "issuers(uint256)": FunctionFragment;
    "issuersTreasury(address)": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "mintPricePerAttribute(bytes32)": FunctionFragment;
    "pricePerAttribute(bytes32)": FunctionFragment;
    "pricePerBusinessAttribute(bytes32)": FunctionFragment;
    "revSplitIssuer()": FunctionFragment;
    "setAttributeMintPrice(bytes32,uint256)": FunctionFragment;
    "setAttributePrice(bytes32,uint256)": FunctionFragment;
    "setBusinessAttributePrice(bytes32,uint256)": FunctionFragment;
    "setEligibleAttribute(bytes32,bool)": FunctionFragment;
    "setEligibleAttributeByDID(bytes32,bool)": FunctionFragment;
    "setEligibleTokenId(uint256,bool)": FunctionFragment;
    "setIssuer(address,address)": FunctionFragment;
    "setMintPrice(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPassportContractAddress(address)": FunctionFragment;
    "setRevSplitIssuer(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateGovernanceInPassport(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowTokenPayment",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesByDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleAttributesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuersLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriceETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuersTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPricePerAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerBusinessAttribute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revSplitIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeMintPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributePrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBusinessAttributePrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttribute",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttributeByDID",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleTokenId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPassportContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevSplitIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceInPassport",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleAttributesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuersTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPricePerAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerBusinessAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBusinessAttributePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttributeByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPassportContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceInPassport",
    data: BytesLike
  ): Result;

  events: {};
}

export class IQuadGovernanceOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IQuadGovernanceOldInterface;

  functions: {
    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eligibleAttributes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleAttributesArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eligibleAttributesByDID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getIssuers(
      overrides?: CallOverrides
    ): Promise<[([string, number] & { issuer: string; status: number })[]]>;

    getIssuersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    issuers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { issuer: string; status: number }]>;

    issuersTreasury(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintPricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricePerBusinessAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    revSplitIssuer(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowTokenPayment(
    _tokenAddr: string,
    _isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteIssuer(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eligibleAttributes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleAttributesArray(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  eligibleAttributesByDID(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleTokenId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getIssuerStatus(_issuer: string, overrides?: CallOverrides): Promise<number>;

  getIssuers(
    overrides?: CallOverrides
  ): Promise<([string, number] & { issuer: string; status: number })[]>;

  getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

  issuers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { issuer: string; status: number }>;

  issuersTreasury(arg0: string, overrides?: CallOverrides): Promise<string>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mintPricePerAttribute(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricePerAttribute(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricePerBusinessAttribute(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

  setAttributeMintPrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttributePrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBusinessAttributePrice(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttribute(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttributeByDID(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleTokenId(
    _tokenId: BigNumberish,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuer(
    _issuer: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintPrice(
    _mintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracleAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPassportContractAddress(
    _passportAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevSplitIssuer(
    _split: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateGovernanceInPassport(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteIssuer(_issuer: string, overrides?: CallOverrides): Promise<void>;

    eligibleAttributes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleAttributesArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    eligibleAttributesByDID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getIssuers(
      overrides?: CallOverrides
    ): Promise<([string, number] & { issuer: string; status: number })[]>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    issuers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { issuer: string; status: number }>;

    issuersTreasury(arg0: string, overrides?: CallOverrides): Promise<string>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintPricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracleAddr: string, overrides?: CallOverrides): Promise<void>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eligibleAttributes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesByDID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuers(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_tokenAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    issuers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    issuersTreasury(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintPricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowTokenPayment(
      _tokenAddr: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eligibleAttributes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesByDID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIssuersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuersTreasury(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerBusinessAttribute(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revSplitIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAttributeMintPrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBusinessAttributePrice(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintPrice(
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracleAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
