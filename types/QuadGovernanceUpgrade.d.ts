/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuadGovernanceUpgradeInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DIGEST_TO_SIGN()": FunctionFragment;
    "GOVERNANCE_ROLE()": FunctionFragment;
    "ISSUER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "READER_ROLE()": FunctionFragment;
    "acceptGovernanceInPassport()": FunctionFragment;
    "addIssuer(address,address)": FunctionFragment;
    "deleteIssuer(address)": FunctionFragment;
    "eligibleAttributes(bytes32)": FunctionFragment;
    "eligibleAttributesArray(uint256)": FunctionFragment;
    "eligibleAttributesByDID(bytes32)": FunctionFragment;
    "eligibleTokenId(uint256)": FunctionFragment;
    "getAllowListAMLThreshold()": FunctionFragment;
    "getEligibleAttributesLength()": FunctionFragment;
    "getIssuerAttributePermission(address,bytes32)": FunctionFragment;
    "getIssuerStatus(address)": FunctionFragment;
    "getIssuers()": FunctionFragment;
    "getIssuersLength()": FunctionFragment;
    "getMaxEligibleTokenId()": FunctionFragment;
    "getPriceETHV2()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "issuers(uint256)": FunctionFragment;
    "issuersTreasury(address)": FunctionFragment;
    "passport()": FunctionFragment;
    "pricePerAttributeFixed(bytes32)": FunctionFragment;
    "pricePerBusinessAttributeFixed(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revSplitIssuer()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowListAMLThreshold(uint256)": FunctionFragment;
    "setAttributePriceFixed(bytes32,uint256)": FunctionFragment;
    "setBusinessAttributePriceFixed(bytes32,uint256)": FunctionFragment;
    "setEligibleAttribute(bytes32,bool)": FunctionFragment;
    "setEligibleAttributeByDID(bytes32,bool)": FunctionFragment;
    "setEligibleTokenId(uint256,bool,string)": FunctionFragment;
    "setIssuerAttributePermission(address,bytes32,bool)": FunctionFragment;
    "setIssuerStatus(address,bool)": FunctionFragment;
    "setPassportContractAddress(address)": FunctionFragment;
    "setRevSplitIssuer(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateGovernanceInPassport(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIGEST_TO_SIGN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "READER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernanceInPassport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAttributesByDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowListAMLThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleAttributesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerAttributePermission",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxEligibleTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceETHV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuersTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "passport", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerAttributeFixed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerBusinessAttributeFixed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revSplitIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListAMLThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributePriceFixed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBusinessAttributePriceFixed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttribute",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleAttributeByDID",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibleTokenId",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuerAttributePermission",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuerStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPassportContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevSplitIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceInPassport",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIGEST_TO_SIGN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "READER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernanceInPassport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAttributesByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowListAMLThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleAttributesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerAttributePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxEligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceETHV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuersTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerAttributeFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerBusinessAttributeFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListAMLThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributePriceFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBusinessAttributePriceFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleAttributeByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibleTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuerAttributePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPassportContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevSplitIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceInPassport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AttributePriceUpdatedFixed(bytes32,uint256,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BusinessAttributePriceUpdatedFixed(bytes32,uint256,uint256)": EventFragment;
    "EligibleAttributeByDIDUpdated(bytes32,bool)": EventFragment;
    "EligibleAttributeUpdated(bytes32,bool)": EventFragment;
    "EligibleTokenUpdated(uint256,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IssuerAdded(address,address)": EventFragment;
    "IssuerAttributePermission(address,bytes32,bool)": EventFragment;
    "IssuerDeleted(address)": EventFragment;
    "IssuerStatusChanged(address,bool)": EventFragment;
    "PassportAddressUpdated(address,address)": EventFragment;
    "RevenueSplitIssuerUpdated(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TreasuryUpdated(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttributePriceUpdatedFixed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BusinessAttributePriceUpdatedFixed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EligibleAttributeByDIDUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibleAttributeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibleTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerAttributePermission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PassportAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueSplitIssuerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type AttributePriceUpdatedFixedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _attribute: string;
    _oldPrice: BigNumber;
    _price: BigNumber;
  }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type BusinessAttributePriceUpdatedFixedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _attribute: string;
    _oldPrice: BigNumber;
    _price: BigNumber;
  }
>;

export type EligibleAttributeByDIDUpdatedEvent = TypedEvent<
  [string, boolean] & { _attribute: string; _eligibleStatus: boolean }
>;

export type EligibleAttributeUpdatedEvent = TypedEvent<
  [string, boolean] & { _attribute: string; _eligibleStatus: boolean }
>;

export type EligibleTokenUpdatedEvent = TypedEvent<
  [BigNumber, boolean] & { _tokenId: BigNumber; _eligibleStatus: boolean }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type IssuerAddedEvent = TypedEvent<
  [string, string] & { _issuer: string; _newTreasury: string }
>;

export type IssuerAttributePermissionEvent = TypedEvent<
  [string, string, boolean] & {
    issuer: string;
    _attribute: string;
    _permission: boolean;
  }
>;

export type IssuerDeletedEvent = TypedEvent<[string] & { _issuer: string }>;

export type IssuerStatusChangedEvent = TypedEvent<
  [string, boolean] & { issuer: string; newStatus: boolean }
>;

export type PassportAddressUpdatedEvent = TypedEvent<
  [string, string] & { _oldAddress: string; _address: string }
>;

export type RevenueSplitIssuerUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _oldSplit: BigNumber; _split: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TreasuryUpdatedEvent = TypedEvent<
  [string, string] & { _oldAddress: string; _address: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class QuadGovernanceUpgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuadGovernanceUpgradeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DIGEST_TO_SIGN(overrides?: CallOverrides): Promise<[string]>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    READER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eligibleAttributes(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleAttributesArray(
      _attribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eligibleAttributesByDID(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eligibleTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAllowListAMLThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIssuers(overrides?: CallOverrides): Promise<[string[]]>;

    getIssuersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxEligibleTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceETHV2(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuers(_index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    issuersTreasury(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    passport(overrides?: CallOverrides): Promise<[string]>;

    pricePerAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricePerBusinessAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revSplitIssuer(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowListAMLThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBusinessAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      _permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuerStatus(
      _issuer: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DIGEST_TO_SIGN(overrides?: CallOverrides): Promise<string>;

  GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  READER_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptGovernanceInPassport(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIssuer(
    _issuer: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteIssuer(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eligibleAttributes(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleAttributesArray(
    _attribute: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  eligibleAttributesByDID(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eligibleTokenId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAllowListAMLThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getIssuerAttributePermission(
    _issuer: string,
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIssuerStatus(_issuer: string, overrides?: CallOverrides): Promise<boolean>;

  getIssuers(overrides?: CallOverrides): Promise<string[]>;

  getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxEligibleTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceETHV2(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuers(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  issuersTreasury(_issuer: string, overrides?: CallOverrides): Promise<string>;

  passport(overrides?: CallOverrides): Promise<string>;

  pricePerAttributeFixed(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricePerBusinessAttributeFixed(
    _attribute: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowListAMLThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttributePriceFixed(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBusinessAttributePriceFixed(
    _attribute: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttribute(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleAttributeByDID(
    _attribute: BytesLike,
    _eligibleStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibleTokenId(
    _tokenId: BigNumberish,
    _eligibleStatus: boolean,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuerAttributePermission(
    _issuer: string,
    _attribute: BytesLike,
    _permission: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuerStatus(
    _issuer: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPassportContractAddress(
    _passportAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevSplitIssuer(
    _split: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateGovernanceInPassport(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DIGEST_TO_SIGN(overrides?: CallOverrides): Promise<string>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    READER_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptGovernanceInPassport(overrides?: CallOverrides): Promise<void>;

    addIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteIssuer(_issuer: string, overrides?: CallOverrides): Promise<void>;

    eligibleAttributes(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleAttributesArray(
      _attribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    eligibleAttributesByDID(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eligibleTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllowListAMLThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIssuers(overrides?: CallOverrides): Promise<string[]>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxEligibleTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETHV2(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    issuers(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    issuersTreasury(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    passport(overrides?: CallOverrides): Promise<string>;

    pricePerAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowListAMLThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBusinessAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      _permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuerStatus(
      _issuer: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_newTreasury: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "AttributePriceUpdatedFixed(bytes32,uint256,uint256)"(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    AttributePriceUpdatedFixed(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "BusinessAttributePriceUpdatedFixed(bytes32,uint256,uint256)"(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    BusinessAttributePriceUpdatedFixed(
      _attribute?: null,
      _oldPrice?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _attribute: string; _oldPrice: BigNumber; _price: BigNumber }
    >;

    "EligibleAttributeByDIDUpdated(bytes32,bool)"(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    EligibleAttributeByDIDUpdated(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    "EligibleAttributeUpdated(bytes32,bool)"(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    EligibleAttributeUpdated(
      _attribute?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { _attribute: string; _eligibleStatus: boolean }
    >;

    "EligibleTokenUpdated(uint256,bool)"(
      _tokenId?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _tokenId: BigNumber; _eligibleStatus: boolean }
    >;

    EligibleTokenUpdated(
      _tokenId?: null,
      _eligibleStatus?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _tokenId: BigNumber; _eligibleStatus: boolean }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "IssuerAdded(address,address)"(
      _issuer?: string | null,
      _newTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { _issuer: string; _newTreasury: string }
    >;

    IssuerAdded(
      _issuer?: string | null,
      _newTreasury?: string | null
    ): TypedEventFilter<
      [string, string],
      { _issuer: string; _newTreasury: string }
    >;

    "IssuerAttributePermission(address,bytes32,bool)"(
      issuer?: string | null,
      _attribute?: null,
      _permission?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { issuer: string; _attribute: string; _permission: boolean }
    >;

    IssuerAttributePermission(
      issuer?: string | null,
      _attribute?: null,
      _permission?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { issuer: string; _attribute: string; _permission: boolean }
    >;

    "IssuerDeleted(address)"(
      _issuer?: string | null
    ): TypedEventFilter<[string], { _issuer: string }>;

    IssuerDeleted(
      _issuer?: string | null
    ): TypedEventFilter<[string], { _issuer: string }>;

    "IssuerStatusChanged(address,bool)"(
      issuer?: string | null,
      newStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { issuer: string; newStatus: boolean }
    >;

    IssuerStatusChanged(
      issuer?: string | null,
      newStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { issuer: string; newStatus: boolean }
    >;

    "PassportAddressUpdated(address,address)"(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    PassportAddressUpdated(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    "RevenueSplitIssuerUpdated(uint256,uint256)"(
      _oldSplit?: null,
      _split?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldSplit: BigNumber; _split: BigNumber }
    >;

    RevenueSplitIssuerUpdated(
      _oldSplit?: null,
      _split?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _oldSplit: BigNumber; _split: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TreasuryUpdated(address,address)"(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    TreasuryUpdated(
      _oldAddress?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldAddress: string; _address: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DIGEST_TO_SIGN(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    READER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eligibleAttributes(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesArray(
      _attribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleAttributesByDID(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eligibleTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowListAMLThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleAttributesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuers(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxEligibleTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceETHV2(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuers(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuersTreasury(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passport(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerBusinessAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revSplitIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowListAMLThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBusinessAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      _permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuerStatus(
      _issuer: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIGEST_TO_SIGN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    READER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernanceInPassport(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIssuer(
      _issuer: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteIssuer(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eligibleAttributes(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesArray(
      _attribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleAttributesByDID(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eligibleTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowListAMLThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEligibleAttributesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuerStatus(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIssuersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxEligibleTokenId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceETHV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuers(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuersTreasury(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    passport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerBusinessAttributeFixed(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revSplitIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListAMLThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBusinessAttributePriceFixed(
      _attribute: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttribute(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleAttributeByDID(
      _attribute: BytesLike,
      _eligibleStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibleTokenId(
      _tokenId: BigNumberish,
      _eligibleStatus: boolean,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuerAttributePermission(
      _issuer: string,
      _attribute: BytesLike,
      _permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuerStatus(
      _issuer: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPassportContractAddress(
      _passportAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevSplitIssuer(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGovernanceInPassport(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
