/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockAllowList, MockAllowListInterface } from "../MockAllowList";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "readAllowList",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setEnabled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setNone",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ef8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c80630aaf704314604b578063704b6c0214604b5780638c6bfb3b14604b578063eb54dae114605b575b600080fd5b60596056366004607e565b50565b005b606c6066366004607e565b50601d90565b60405190815260200160405180910390f35b600060208284031215608f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811460b257600080fd5b939250505056fea26469706673582212202f4ee9bc0fe1875a06811d3d2272e4a7044c6adda052def6012823229c7fc16d64736f6c63430008100033";

export class MockAllowList__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAllowList> {
    return super.deploy(overrides || {}) as Promise<MockAllowList>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockAllowList {
    return super.attach(address) as MockAllowList;
  }
  connect(signer: Signer): MockAllowList__factory {
    return super.connect(signer) as MockAllowList__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAllowListInterface {
    return new utils.Interface(_abi) as MockAllowListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAllowList {
    return new Contract(address, _abi, signerOrProvider) as MockAllowList;
  }
}
