/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestQueryUtils,
  TestQueryUtilsInterface,
} from "../TestQueryUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_attrValue",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_expectedString",
        type: "string",
      },
    ],
    name: "CountryIsEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_attrValue",
        type: "bytes32",
      },
    ],
    name: "IsBusinessFalse",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_attrValue",
        type: "bytes32",
      },
    ],
    name: "IsBusinessTrue",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610408806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638b09a7aa146100465780638e40c5721461006d578063bf44459714610080575b600080fd5b61005961005436600461024a565b610093565b604051901515815260200160405180910390f35b61005961007b366004610323565b610130565b61005961008e366004610323565b6101c7565b6040517f8b09a7aa00000000000000000000000000000000000000000000000000000000815260009073__$358eab11ac87ee2ea301c510bd6c2ced46$__90638b09a7aa906100e8908690869060040161033c565b602060405180830381865af4158015610105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012991906103b0565b9392505050565b6040517f8e40c5720000000000000000000000000000000000000000000000000000000081526004810182905260009073__$358eab11ac87ee2ea301c510bd6c2ced46$__90638e40c572906024015b602060405180830381865af415801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c191906103b0565b92915050565b6040517fbf4445970000000000000000000000000000000000000000000000000000000081526004810182905260009073__$358eab11ac87ee2ea301c510bd6c2ced46$__9063bf44459790602401610180565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561025d57600080fd5b82359150602083013567ffffffffffffffff8082111561027c57600080fd5b818501915085601f83011261029057600080fd5b8135818111156102a2576102a261021b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156102e8576102e861021b565b8160405282815288602084870101111561030157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561033557600080fd5b5035919050565b82815260006020604081840152835180604085015260005b8181101561037057858101830151858201606001528201610354565b5060006060828601015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509392505050565b6000602082840312156103c257600080fd5b8151801515811461012957600080fdfea2646970667358221220455de97196f09e1e480e63d95fa17c800a164f8a87d8879077749fb120b441e764736f6c63430008100033";

type TestQueryUtilsConstructorParams =
  | [linkLibraryAddresses: TestQueryUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestQueryUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TestQueryUtils__factory extends ContractFactory {
  constructor(...args: TestQueryUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        TestQueryUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: TestQueryUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$358eab11ac87ee2ea301c510bd6c2ced46\\$__", "g"),
      linkLibraryAddresses["contracts/utility/QueryUtils.sol:QueryUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestQueryUtils> {
    return super.deploy(overrides || {}) as Promise<TestQueryUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestQueryUtils {
    return super.attach(address) as TestQueryUtils;
  }
  connect(signer: Signer): TestQueryUtils__factory {
    return super.connect(signer) as TestQueryUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestQueryUtilsInterface {
    return new utils.Interface(_abi) as TestQueryUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestQueryUtils {
    return new Contract(address, _abi, signerOrProvider) as TestQueryUtils;
  }
}

export interface TestQueryUtilsLibraryAddresses {
  ["contracts/utility/QueryUtils.sol:QueryUtils"]: string;
}
