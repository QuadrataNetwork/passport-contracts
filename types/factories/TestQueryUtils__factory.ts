/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestQueryUtils,
  TestQueryUtilsInterface,
} from "../TestQueryUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_attrValue",
        type: "bytes32",
      },
    ],
    name: "isBusinessTrue",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610165806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c30089bb14610030575b600080fd5b61004361003e3660046100ed565b610057565b604051901515815260200160405180910390f35b6040517fbf4445970000000000000000000000000000000000000000000000000000000081526004810182905260009073__$358eab11ac87ee2ea301c510bd6c2ced46$__9063bf44459790602401602060405180830381865af41580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610106565b92915050565b6000602082840312156100ff57600080fd5b5035919050565b60006020828403121561011857600080fd5b8151801515811461012857600080fd5b939250505056fea2646970667358221220b546b7d13bb46c23d8fac38e4c4f35b5f66da72ca9e8f2399641e27e5bfed44264736f6c63430008100033";

type TestQueryUtilsConstructorParams =
  | [linkLibraryAddresses: TestQueryUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestQueryUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TestQueryUtils__factory extends ContractFactory {
  constructor(...args: TestQueryUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        TestQueryUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: TestQueryUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$358eab11ac87ee2ea301c510bd6c2ced46\\$__", "g"),
      linkLibraryAddresses["contracts/utility/QueryUtils.sol:QueryUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestQueryUtils> {
    return super.deploy(overrides || {}) as Promise<TestQueryUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestQueryUtils {
    return super.attach(address) as TestQueryUtils;
  }
  connect(signer: Signer): TestQueryUtils__factory {
    return super.connect(signer) as TestQueryUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestQueryUtilsInterface {
    return new utils.Interface(_abi) as TestQueryUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestQueryUtils {
    return new Contract(address, _abi, signerOrProvider) as TestQueryUtils;
  }
}

export interface TestQueryUtilsLibraryAddresses {
  ["contracts/utility/QueryUtils.sol:QueryUtils"]: string;
}
