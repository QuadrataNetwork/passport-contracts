/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockBusinessInterface extends ethers.utils.Interface {
  functions: {
    "burnPassports()": FunctionFragment;
    "defi()": FunctionFragment;
    "deposit(bytes32)": FunctionFragment;
    "depositBulk(bytes32[])": FunctionFragment;
    "depositBulkLegacy(bytes32[])": FunctionFragment;
    "depositLegacy(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnPassports",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "defi", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "depositBulk",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBulkLegacy",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLegacy",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnPassports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBulkLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLegacy",
    data: BytesLike
  ): Result;

  events: {
    "GetAttributesBulkEventBusiness(bytes32[],uint256[],address[])": EventFragment;
    "GetAttributesEventBusiness(bytes32[],uint256[],address[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "GetAttributesBulkEventBusiness"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetAttributesEventBusiness"): EventFragment;
}

export type GetAttributesBulkEventBusinessEvent = TypedEvent<
  [string[], BigNumber[], string[]] & {
    attrValues: string[];
    epochs: BigNumber[];
    issuers: string[];
  }
>;

export type GetAttributesEventBusinessEvent = TypedEvent<
  [string[], BigNumber[], string[]] & {
    attrValues: string[];
    epochs: BigNumber[];
    issuers: string[];
  }
>;

export class MockBusiness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockBusinessInterface;

  functions: {
    burnPassports(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defi(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBulk(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBulkLegacy(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLegacy(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnPassports(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defi(overrides?: CallOverrides): Promise<string>;

  deposit(
    _attribute: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBulk(
    _attributes: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBulkLegacy(
    _attributes: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLegacy(
    _attribute: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnPassports(overrides?: CallOverrides): Promise<void>;

    defi(overrides?: CallOverrides): Promise<string>;

    deposit(_attribute: BytesLike, overrides?: CallOverrides): Promise<void>;

    depositBulk(
      _attributes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositBulkLegacy(
      _attributes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositLegacy(
      _attribute: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GetAttributesBulkEventBusiness(bytes32[],uint256[],address[])"(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    GetAttributesBulkEventBusiness(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    "GetAttributesEventBusiness(bytes32[],uint256[],address[])"(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;

    GetAttributesEventBusiness(
      attrValues?: null,
      epochs?: null,
      issuers?: null
    ): TypedEventFilter<
      [string[], BigNumber[], string[]],
      { attrValues: string[]; epochs: BigNumber[]; issuers: string[] }
    >;
  };

  estimateGas: {
    burnPassports(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defi(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBulk(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBulkLegacy(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLegacy(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnPassports(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBulk(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBulkLegacy(
      _attributes: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLegacy(
      _attribute: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
